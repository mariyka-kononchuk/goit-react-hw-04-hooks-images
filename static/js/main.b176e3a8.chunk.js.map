{"version":3,"sources":["components/Modal/Modal.styled.jsx","components/Modal/Modal.js","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.js","components/ImageGalleryItem/ImageGalleryItem.styled.jsx","components/ImageGalleryItem/ImageGalleryItem.js","components/Button/Button.styled.jsx","components/Button/Button.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.js","services/images-api.js","components/ImageGallery/ImageGallery.styled.jsx","components/ImageGallery/ImageGallery.js","components/App/App.styled.jsx","components/App/App.js","index.js"],"names":["Overlay","styled","div","WindowModal","modalRoot","document","querySelector","Modal","children","onClose","useEffect","window","addEventListener","handleKeyDown","removeEventListener","e","code","createPortal","onClick","currentTarget","target","Header","header","SearchForm","form","SearchFormButton","button","Label","span","Input","input","Searchbar","onSubmit","useState","searchName","setSearchName","preventDefault","trim","toast","style","borderRadius","background","color","type","name","value","onChange","toLowerCase","autocomplete","autoFocus","placeholder","ItemImage","img","Item","li","ImageGalleryItem","src","alt","largeImage","LoadMoreButton","Button","Spinner","SpinnerLoader","height","width","baseUrl","axios","defaults","baseURL","apiKey","fetchImages","page","a","queryParams","url","fetch","then","response","ok","json","Promise","reject","Error","List","ul","Status","ImageGallery","onSelect","images","setImages","setPage","searchResult","setSearchResult","status","setStatus","spinner","setSpinner","myRef","useRef","data","hits","length","total","scrollToRef","catch","error","newImages","current","scrollIntoView","behavior","block","map","image","webformatURL","tags","largeImageURL","id","ref","Container","App","selectedImage","setSelectedImage","imageUrl","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b176e3a8.chunk.js","sourcesContent":["import styled from '@emotion/styled'\r\n\r\nexport const Overlay = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n    z-index: 1200;\r\n`\r\n\r\nexport const WindowModal = styled.div`\r\n    max-width: calc(100vw - 48px);\r\n    max-height: calc(100vh - 24px);\r\n`","import { useEffect } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport {Overlay, WindowModal} from './Modal.styled'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default function Modal({children, onClose}) {\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        }\r\n    });\r\n        \r\n    const handleKeyDown = e => {\r\n        if (e.code === 'Escape') {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    const handleBackdropClick = e => {\r\n        if (e.currentTarget === e.target) {\r\n            onClose();\r\n        }\r\n    };\r\n\r\n    return createPortal(\r\n        <Overlay onClick={handleBackdropClick}>\r\n            <WindowModal>{children}</WindowModal>\r\n        </Overlay>,\r\n        modalRoot)\r\n}\r\n\r\nModal.propTypes = {\r\n    onClose:PropTypes.func.isRequired\r\n};\r\n\r\n","import styled from '@emotion/styled'\r\n\r\nexport const Header = styled.header`\r\n    top: 0;\r\n    left: 0;\r\n    position: sticky;\r\n    z-index: 1100;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 64px;\r\n    padding-right: 24px;\r\n    padding-left: 24px;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    color: #fff;\r\n    background-color: #3f51b5;\r\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14),\r\n        0px 1px 10px 0px rgba(0, 0, 0, 0.12);\r\n`\r\nexport const SearchForm = styled.form`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    max-width: 600px;\r\n    background-color: #fff;\r\n    border-radius: 3px;\r\n    overflow: hidden;\r\n`\r\nexport const SearchFormButton = styled.button`\r\n    display: inline-block;\r\n    width: 48px;\r\n    height: 48px;\r\n    border: 0;\r\n    background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\r\n    background-size: 40%;\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    opacity: 0.6;\r\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n    cursor: pointer;\r\n    outline: none;\r\n\r\n    &:hover{\r\n        opacity: 1;\r\n    }\r\n`\r\nexport const Label = styled.span`\r\n    position: absolute;\r\n    width: 1px;\r\n    height: 1px;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    clip: rect(0, 0, 0, 0);\r\n    white-space: nowrap;\r\n    clip-path: inset(50%);\r\n    border: 0;\r\n`\r\nexport const Input = styled.input`\r\n    display: inline-block;\r\n    width: 100%;\r\n    font: inherit;\r\n    font-size: 20px;\r\n    border: none;\r\n    outline: none;\r\n    padding-left: 4px;\r\n    padding-right: 4px;\r\n\r\n    ::placeholder{\r\n        font: inherit;\r\n        font-size: 18px;\r\n    }\r\n`","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport toast from 'react-hot-toast';\r\nimport { Header, SearchForm, SearchFormButton, Label, Input } from './Searchbar.styled'\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n    \r\n    const [searchName, setSearchName] = useState('');\r\n    \r\n    const handleNameChange = e => {\r\n        setSearchName(e.currentTarget.value.toLowerCase())\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (searchName.trim() === '') {\r\n            return toast('Please enter search word', {\r\n                style: {\r\n                    borderRadius: '10px',\r\n                    background: '#333',\r\n                    color: '#fff',\r\n                }\r\n            });\r\n        }\r\n        onSubmit(searchName);\r\n        setSearchName('')\r\n    }\r\n\r\n        return (\r\n            <Header>\r\n                <SearchForm  onSubmit={handleSubmit}>\r\n                    <SearchFormButton type=\"submit\">\r\n                        <Label>Search</Label>\r\n                    </SearchFormButton>\r\n                    <Input\r\n                        type=\"text\"\r\n                        name={searchName}\r\n                        value={searchName}\r\n                        onChange = {handleNameChange}\r\n                        autocomplete=\"off\"\r\n                        autoFocus\r\n                        placeholder=\"Search images and photos\"\r\n                    />\r\n                </SearchForm>\r\n            </Header>\r\n        )\r\n    \r\n}\r\n\r\nSearchbar.propTypes = {\r\n    searchName: PropTypes.string,\r\n    onSubmit: PropTypes.func,\r\n    onChange:PropTypes.func\r\n};\r\n\r\n","import styled from '@emotion/styled'\r\n\r\nexport const ItemImage = styled.img`\r\nwidth: 100%;\r\n  height: 260px;\r\n  object-fit: cover;\r\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n  &:hover {\r\n    transform: scale(1.03);\r\n    cursor: zoom-in;\r\n  }\r\n`\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    max-width: calc(100vw - 48px);\r\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\r\n    grid-gap: 16px;\r\n    margin-top: 0;\r\n    margin-bottom: 0;\r\n    padding: 0;\r\n    list-style: none;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  `\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Item, ItemImage} from './ImageGalleryItem.styled'\r\n\r\nconst ImageGalleryItem = ({ src, alt, largeImage, onClick }) => (\r\n    <Item onClick={() => onClick({ largeImage }) }  >\r\n        <ItemImage src={src} alt={alt} />\r\n    </Item>\r\n)\r\n\r\nImageGalleryItem.propTypes = {\r\n    src: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired,\r\n    largeImage: PropTypes.string,\r\n    onClick:PropTypes.func.isRequired\r\n};\r\n\r\nexport default ImageGalleryItem;","\r\nimport styled from '@emotion/styled'\r\n\r\n\r\nexport const LoadMoreButton = styled.button`\r\n  padding: 8px 16px;\r\n    border-radius: 2px;\r\n    background-color: #3f51b5;\r\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n    text-align: center;\r\n    display: block;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    color: #fff;\r\n    border: 0;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n    font-family: inherit;\r\n    font-size: 18px;\r\n    line-height: 24px;\r\n    font-style: normal;\r\n    font-weight: 500;\r\n    min-width: 180px;\r\n    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14),\r\n    0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n      &:hover, focus {\r\n        background-color: #303f9f;\r\n      }\r\n`\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {LoadMoreButton} from './Button.styled'\r\n\r\n\r\nconst Button = ({onClick}) => (\r\n    <LoadMoreButton type=\"button\" onClick ={onClick}>Load More</LoadMoreButton>\r\n)\r\n\r\nexport default Button;\r\n\r\nButton.propTypes = {\r\n    onClick:PropTypes.func.isRequired\r\n};","import styled from '@emotion/styled'\r\n\r\nexport const Spinner = styled.div`\r\n    width:80px;\r\n    margin-left:auto;\r\n    margin-right:auto;\r\n`","import React from 'react';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport {Spinner} from './Loader.styled.jsx'\r\n\r\nconst SpinnerLoader = () => (\r\n    <Spinner>\r\n        <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />\r\n    </Spinner>\r\n)\r\n\r\nexport default SpinnerLoader;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"https://pixabay.com/api/\";\r\naxios.defaults.baseURL = baseUrl;\r\nconst apiKey = \"22651538-53630abe578d2561aeb41817a\";\r\n\r\n\r\nexport async function fetchImages(name, page) {\r\n    const queryParams = `?key=${apiKey}&q=${name}&image_type=photo&per_page=12&page=${page}&orientation=horizontal&safesearch=true`;\r\n    const url = baseUrl + queryParams;\r\n    return await fetch(url)\r\n                .then(response => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    }\r\n                    return Promise.reject(\r\n                        new Error('Извините, по вашему запросу ничего не найдено'),\r\n                    );\r\n                })\r\n}","import styled from '@emotion/styled'\r\n\r\n\r\nexport const List = styled.ul`\r\n    display: grid;\r\n    width: 1320px;\r\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\r\n    grid-auto-rows: 260px;\r\n    grid-gap: 12px;\r\n    padding: 0;\r\n    list-style: none;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  `\r\n\r\n\r\n\r\n","import {useState, useEffect, useRef} from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ImageGalleryItem from '../ImageGalleryItem';\r\nimport LoadMoreButton from '../Button';\r\nimport SpinnerLoader from '../Loader';\r\n\r\nimport { fetchImages } from '../../services/images-api';\r\nimport { List } from './ImageGallery.styled.jsx'\r\n\r\nconst Status = {\r\n    IDLE: 'idle',\r\n    RESOLVED: 'resolved',\r\n    REJECTED:'rejected'\r\n}\r\n\r\nexport default function ImageGallery({ searchName, onSelect}) {\r\n    const [images, setImages] = useState( []);\r\n    const [page, setPage] = useState( 1 );\r\n    const [searchResult, setSearchResult] = useState(null);\r\n    const [status, setStatus] = useState(Status.IDLE);\r\n    const [spinner, setSpinner] = useState(false);\r\n\r\n    const myRef = useRef();\r\n    \r\n    //new search\r\n     useEffect(() => {\r\n        if (!searchName) {\r\n            return; \r\n        }\r\n        setSpinner(true);\r\n    \r\n        fetchImages(searchName, 1)\r\n            .then((data) => {\r\n                if (data.hits.length === 0) {\r\n                    return toast('Alas, no items found per your query', {\r\n                        style: {\r\n                            borderRadius: '10px',\r\n                            background: '#333',\r\n                            color: '#fff',\r\n                        },\r\n                    });\r\n                }\r\n                setImages(data.hits);\r\n                setSearchResult(data.total);\r\n                setStatus(Status.RESOLVED);\r\n                setSpinner(false);\r\n                scrollToRef();\r\n            })\r\n            .catch(error => {\r\n                setStatus(Status.REJECTED);\r\n                setSpinner(false);\r\n            });\r\n        \r\n     }, [searchName])\r\n    \r\n    //load more\r\n    useEffect(() => {\r\n        if (!searchName) {\r\n            return; \r\n        }\r\n        setSpinner(true);\r\n        fetchImages(searchName, page)\r\n            .then((data) => {\r\n                let newImages = [...images, ...data.hits];\r\n                setImages(newImages);\r\n                setSearchResult(data.total);\r\n                setStatus(Status.RESOLVED);\r\n                setSpinner(false);\r\n                scrollToRef();\r\n            })\r\n            .catch(error => {\r\n                setStatus(Status.REJECTED);\r\n                setSpinner(false);\r\n            });\r\n        \r\n    },[page])\r\n\r\n    const toggleLoadMore = () => {\r\n        setSpinner(true);\r\n        setPage(page => page + 1);\r\n    }\r\n\r\n    const scrollToRef = () => {\r\n        myRef.current.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\r\n    }\r\n\r\n    if (status === Status.IDLE) {\r\n        return <div></div>\r\n    }\r\n    \r\n    if (status === Status.REJECTED) {\r\n        return toast('Извините, по вашему запросу ничего не найдено', {\r\n            style: {\r\n                borderRadius: '10px',\r\n                background: '#333',\r\n                color: '#fff',\r\n            },\r\n        });\r\n    }\r\n    \r\n    if (status === Status.RESOLVED) {\r\n        return (\r\n            <div>\r\n                <List >\r\n                    {images.map(image => (\r\n                        <ImageGalleryItem src={image.webformatURL} alt={image.tags} onClick={() => onSelect(image.largeImageURL)} key={image.id} />\r\n                    ))}\r\n                </List>\r\n                {spinner && <SpinnerLoader />}\r\n                <div ref={myRef} >{searchResult > 12 && <LoadMoreButton onClick={toggleLoadMore} />}</div>\r\n            </div>\r\n                \r\n        )\r\n    \r\n    }\r\n}\r\n\r\nImageGallery.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n    onSelect: PropTypes.func,\r\n    searchName: PropTypes.string.isRequired,\r\n};","import styled from '@emotion/styled'\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 16px;\n  padding-bottom: 24px;\n\n  // margin-left: auto;\n  // margin-right: auto;\n  // padding-top: 20px;\n  // padding-left: 15px;\n  // padding-right: 15px;\n  // width: 1280px;\n`;\n","import React, { useState } from 'react';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Toaster } from 'react-hot-toast';\nimport Modal from '../Modal';\nimport Searchbar from '../Searchbar';\nimport ImageGallery from '../ImageGallery';\nimport {Container} from './App.styled'\n\nexport default function App() {\n  \n  const [searchName, setSearchName] = useState('');\n  const [selectedImage, setSelectedImage] = useState(null);\n \n  const handleSearchSubmit = (searchName) => {\n    setSearchName(searchName);\n\n  }\n\n  const handleSelectImage = imageUrl => {\n    setSelectedImage(imageUrl);\n  }\n\n  const closeModal = () => setSelectedImage(null);\n\n  \n    return (\n      <Container>\n        \n          <Searchbar onSubmit={handleSearchSubmit} />\n        <ImageGallery\n          searchName={searchName}\n          onSelect={handleSelectImage} />\n          {selectedImage && <Modal onClose = {closeModal}>\n            <img src={selectedImage} alt=\"\" />\n          </Modal>}\n          <Toaster/>\n        \n      </Container>\n    );\n  \n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './components/App';\n\n//real DOM\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}